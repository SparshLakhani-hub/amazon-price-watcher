name: Amazon Price Watch

on:
  schedule:
    - cron: "30 12 * * *"  # ~08:30 America/New_York (UTC-based)
  workflow_dispatch: {}

jobs:
  scrape:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers & system deps
        run: |
          python -m playwright install
          python -m playwright install-deps

      - name: Create .env from secrets
        run: |
          cat > .env << 'EOF'
          AMAZON_BASE_URL=${{ secrets.AMAZON_BASE_URL }}
          ALERT_EMAIL_FROM=${{ secrets.ALERT_EMAIL_FROM }}
          ALERT_EMAIL_TO=${{ secrets.ALERT_EMAIL_TO }}
          ALERT_EMAIL_SMTP=${{ secrets.ALERT_EMAIL_SMTP }}
          ALERT_EMAIL_PORT=${{ secrets.ALERT_EMAIL_PORT }}
          ALERT_EMAIL_USER=${{ secrets.ALERT_EMAIL_USER }}
          ALERT_EMAIL_PASS=${{ secrets.ALERT_EMAIL_PASS }}
          SCRAPER_MIN_SLEEP_SEC=6
          SCRAPER_MAX_SLEEP_SEC=14
          SCRAPER_MAX_RETRIES=3
          TIMEZONE=America/New_York
          EOF

      - name: Initialize DB (safe if exists)
        run: |
          python -c "from app.db import init_db; init_db()"
      - name: Ensure at least 1 product (idempotent)
        run: |
          python add_product.py "https://www.amazon.com/dp/B0BDHWDR12" 10
      - name: Run one scrape + alert cycle
        run: |
          python run_once.py

      - name: Commit DB back to repo (if changed)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add db.sqlite3
          git diff --cached --quiet || (git commit -m "Update db.sqlite3 [ci skip]" && git push)
